{"meta":{"title":"鸭梨","subtitle":"","description":"","author":"鸭梨","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"un22fin22","updated":"un22fin22","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"un22fin22","updated":"un22fin22","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker-常用命令","slug":"docker-commands","date":"un33fin33","updated":"un33fin33","comments":true,"path":"2021/09/08/docker-commands/","link":"","permalink":"http://example.com/2021/09/08/docker-commands/","excerpt":"赚钱好比燕衔泥，花钱就象河决堤。 镜像相关命令1.查看本地的所有镜像 12$ docker images$ docker image ls 2.载入镜像到本地 1$ docker pull &lt;image name&gt;:&lt;image tag&gt; 3.删除镜像 12$ docker rmi -f &lt;image id&gt;$ docker rmi -f &lt;image name&gt;:&lt;image tag&gt; 容器使用相关命令1.创建容器 1$ docker run -itd --name &lt;container name&gt; &lt;image name&gt;|&lt;image id&gt; /bin/bash 2.进入容器 1$ docker exec -it &lt;container id&gt;|&lt;container name&gt; /bin/bash 3.停止或重启容器 12$ docker stop &lt;container id&gt;$ docker restart &lt;container id&gt; 4.删除容器 12$ docker rm -f &lt;container id&gt;$ docker container prune 5.查看容器 123$ docker ps$ docker ps -a$ docker inspect &lt;container id&gt; 容器连接相关命令","text":"赚钱好比燕衔泥，花钱就象河决堤。 镜像相关命令1.查看本地的所有镜像 12$ docker images$ docker image ls 2.载入镜像到本地 1$ docker pull &lt;image name&gt;:&lt;image tag&gt; 3.删除镜像 12$ docker rmi -f &lt;image id&gt;$ docker rmi -f &lt;image name&gt;:&lt;image tag&gt; 容器使用相关命令1.创建容器 1$ docker run -itd --name &lt;container name&gt; &lt;image name&gt;|&lt;image id&gt; /bin/bash 2.进入容器 1$ docker exec -it &lt;container id&gt;|&lt;container name&gt; /bin/bash 3.停止或重启容器 12$ docker stop &lt;container id&gt;$ docker restart &lt;container id&gt; 4.删除容器 12$ docker rm -f &lt;container id&gt;$ docker container prune 5.查看容器 123$ docker ps$ docker ps -a$ docker inspect &lt;container id&gt; 容器连接相关命令 1.网络端口映射 1234$ docker run -d -P training/webapp python app.py$ docker run -d -p 5000:5000 training/webapp python app.py$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py 2.容器互联 1$ docker network create -d bridge test-net 1$ docker run -itd --name test1 --network test-net ubuntu /bin/bash Dockerfile相关操作12$ docker build -t &lt;image name&gt;:&lt;tag&gt; &lt;path&gt;$ docker build -t nginx:v3 . Docker Compose相关操作123$ docker-compose up --build -d$ docker-compose start &lt;container id&gt;$ docker-compose stop &lt;container id&gt;","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"用docker-compose部署构建django+uwsgi+redis+mysql项目","slug":"docker-compose-部署-1","date":"un33fin33","updated":"un33fin33","comments":true,"path":"2021/09/08/docker-compose-部署-1/","link":"","permalink":"http://example.com/2021/09/08/docker-compose-%E9%83%A8%E7%BD%B2-1/","excerpt":"1.docker-compose组合容器通过docker-compose编排并启动4个容器。 Django + Uwsgi容器：应用程序，后端。 Mysql容器：数据库服务。 Redis容器：缓存服务。 Nginx容器：反向代理，处理静态资源。 2.Docker-compose部署Django项目布局树形图12345678910111213141516171819202122232425262728293031323334353637383940414243444546/build_project/├── compose # 存放各容器服务Dockerfile配置文件 ├── mysql │ ├── conf │ │ └── my.cnf # mysql配置文件 │ ├── init │ │ └── init.sql # mysql初始化启动脚本 │ └── sqldata # sql 数据 │ └── west_coast.sql # .sql 文件 ├── nginx │ ├── Dockerfile # 构建nginx镜像的dockerfile │ ├── log # 挂载保存nginx容器内日志 │ │ ├── access.log # 正常日志 │ │ └── error.log # 错误信息日志 │ ├── nginx.conf # nginx配置文件 │ ├── phone.tar.gz # vue静态打包文件手机端 │ └── web.tar.gz # vue静态打包文件pc端 ├── redis │ ├── redis.conf # redis配置文件 │ └── redis.conf.bak └── uwsgi └── manager_admin-master.pid # 挂载保存django+uwsgi容器内uwsgi日志├── docker-compose.yml # 部署编排文件└── manager_admin # 项目目录 ├── db.sqlite3 ├── Dockerfile # 构建Django+Uwsgi镜像的dockerfile ├── logs # 项目日志 ├── manage.py ├── manager_admin # Django项目配置文件 ├── asgi.py ├── __init__.py ├── __pycache__ ├── settings.py ├── urls.py └── wsgi.py ├── pip.conf # pypi源配置。加速pip install ├── README.md ├── requirements.txt # django 项目依赖 ├── resignmanager ├── run.sh # 启动Django+Uwsgi 脚本 ├── static # 静态文件 ├── templates ├── upload ├── uwsgi.ini # uwsgi配置 └── uwsgi.log 3.基础镜像下载","text":"1.docker-compose组合容器通过docker-compose编排并启动4个容器。 Django + Uwsgi容器：应用程序，后端。 Mysql容器：数据库服务。 Redis容器：缓存服务。 Nginx容器：反向代理，处理静态资源。 2.Docker-compose部署Django项目布局树形图12345678910111213141516171819202122232425262728293031323334353637383940414243444546/build_project/├── compose # 存放各容器服务Dockerfile配置文件 ├── mysql │ ├── conf │ │ └── my.cnf # mysql配置文件 │ ├── init │ │ └── init.sql # mysql初始化启动脚本 │ └── sqldata # sql 数据 │ └── west_coast.sql # .sql 文件 ├── nginx │ ├── Dockerfile # 构建nginx镜像的dockerfile │ ├── log # 挂载保存nginx容器内日志 │ │ ├── access.log # 正常日志 │ │ └── error.log # 错误信息日志 │ ├── nginx.conf # nginx配置文件 │ ├── phone.tar.gz # vue静态打包文件手机端 │ └── web.tar.gz # vue静态打包文件pc端 ├── redis │ ├── redis.conf # redis配置文件 │ └── redis.conf.bak └── uwsgi └── manager_admin-master.pid # 挂载保存django+uwsgi容器内uwsgi日志├── docker-compose.yml # 部署编排文件└── manager_admin # 项目目录 ├── db.sqlite3 ├── Dockerfile # 构建Django+Uwsgi镜像的dockerfile ├── logs # 项目日志 ├── manage.py ├── manager_admin # Django项目配置文件 ├── asgi.py ├── __init__.py ├── __pycache__ ├── settings.py ├── urls.py └── wsgi.py ├── pip.conf # pypi源配置。加速pip install ├── README.md ├── requirements.txt # django 项目依赖 ├── resignmanager ├── run.sh # 启动Django+Uwsgi 脚本 ├── static # 静态文件 ├── templates ├── upload ├── uwsgi.ini # uwsgi配置 └── uwsgi.log 3.基础镜像下载 nginx: docker pull nginx:latest redis: docker pull redis:5.0.3 mysql: docker pull mysql:8.0.11 python3: docker pull python:3.9.6 4.编写Dockerfile 通过docker-compose.yml，编排了4项容器服务，别名分别为redis，mysqldb，nginx和web： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576version: &quot;3.8&quot;volumes: # 自定义数据卷,位于宿主机/var/lib/docker/volumes内 myproject_db_vol: # 定义数据卷同步容器内mysql数据 myproject_redis_vol: # 定义数据卷同步redis容器内数据services: redis: image: redis:5.0.3 volumes: - myproject_redis_vol:/data # 给redis数据备份 - ./compose/redis/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件 expose: # 暴露容器给link到当前容器的容器，或者暴露给同一个networks的容器 - &quot;16379&quot; command: redis-server /etc/redis/redis.conf # restart: always # always表容器运行发生错误时一直重启 mysqldb: image: mysql:8.0.11 environment: - MYSQL_ROOT_PASSWORD=somemanageradmin # 数据库密码 - MYSQL_DATABASE=manageradmin # 数据库名称 - MYSQL_USER=manageradmin # 数据库用户名 - MYSQL_PASSWORD=manageradmin # 用户密码 volumes: - myproject_db_vol:/var/lib/mysql:rw # 挂载数据库数据,可读可写 - ./compose/mysql/sqldata:/opt:rw # 挂载sql数据文件 - ./compose/mysql/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件 - ./compose/mysql/init:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本 ports: # 暴露容器端口到主机的任意端口或指定端口 - &quot;3306:3306&quot; restart: always web: build: ./manager_admin # 使用manager_admin目录下的Dockerfile ports: # 暴露端口到宿主机 - &quot;3001:3001&quot; expose: # 不会将端口暴露给主机，主机无法访问expose的端口 - &quot;3001&quot; volumes: - ./manager_admin:/var/api/manager_admin # 挂载项目代码 - ./compose/uwsgi:/tmp # 挂载uwsgi日志 links: # 在未提供ports情况下，端口是变动的，使用links可以做保证每一次都能连接数据库 - mysqldb - redis depends_on: # 定义容器之间启动的优先级，但不会等到容器ready再启动 - mysqldb - redis environment: - DEBUG=False restart: always # command: ./run.sh # 1.使用sheel脚本去启动 # command: /bin/bash -c &quot;python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; python3 manage.py runserver 0.0.0.0:3001 &quot; # 2.使用runserver启动 command: /bin/bash -c &quot;python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; uwsgi --ini /opt/manager_admin/uwsgi.ini &quot; # 3.使用uwsgi启动 nginx: build: ./compose/nginx ports: - &quot;80:80&quot; - &quot;8000:8000&quot; expose: - &quot;80&quot; - &quot;8000&quot; volumes: - ./compose/nginx/log:/var/log/nginx # 挂载日志 - /data/build_project/manager_admin/static:/src/static # 挂载静态文件 links: - web depends_on: - web restart: always#volumes:# db_data:# web_data: 5.编写web镜像 构建manager_admin/Dockerfile 123456789101112131415161718# syntax=docker/dockerfile:1FROM python:3.9.6# 设置 python 环境变量ENV PYTHONUNBUFFERED 1# 容器内创建项目目录RUN mkdir -p /opt/manager_admin# 工作目录WORKDIR /opt/manager_admin# 将当前目录下文件 放入容器指定目录COPY . .# 修改pip镜像源COPY pip.conf /root/.pip/pip.conf# 更新pipRUN /usr/local/bin/python -m pip install --upgrade pip# 安装依赖RUN pip3 install -r requirements.txt# 启动项目脚本 增加执行权限# RUN chmod +x ./run.sh run.sh 12345#!/bin/bash# 生成数据库可执行文件，# 根据数据库可执行文件来修改数据库#/bin/bash -c &quot;python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; nohup python3 manage.py runserver 0:3001 &gt;&gt; /usr/local/web_start.log 2&gt;&amp;1 &amp; python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; uwsgi -d --ini /opt/manager_admin/uwsgi.ini uwsgi.ini配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344[uwsgi]# 项目名称project=manager_adminbase=/opt# the base directory (full path)# 指定项目目录的绝对路径的第一层路径# 项目目录chdir=%(base)/%(project)# 指定项目application(项目的wsgi.py文件)# 写入相对路径即可,这个参数是以chdir参数做为相对路径module=%(project).wsgi:application# 启动主进程,来管理其他进程,其它的uwsgi进程都是这个master进程的子进程,如果kill这个master进程,相当于重启所有的uwsgi进程master=true# 进程个数(processess一样效果)processes=2# 指定socket文件,也可以指定为127.0.0.1:3001,这样就会监听网络套接字(nginx使用)socket=0.0.0.0:3001# 当服务器退出的时候自动删除unix socket文件和pid文件vacuum=true# 为每个工作进程设置请求数上限,当一个工作进程处理的请求数达到这个值,那么该工作进程就会被回收重用(重启),你可以用这个选项来默默地对抗内存泄露max-requests=5000# 指定启动时的pid文件路径pidfile=/tmp/%(project)-master.pid# 设置日志目录#daemonize=/tmp/%(project)-uwsgi.log # 会出现uwsgi秒退状况# 设置一个请求的超时时间(秒),如果一个请求超过了这个时间,则请求被丢弃harakiri=60# 设置缓冲post buffering=8192# 设置用于uwsgi包解析的内部缓存区大小65535k,默认4kbuffer-size=65535# 当一个请求被harakiri杀掉会输出一条日志harakiri-verbose=true# 开启内存使用情况报告memory-report=true# 设置在平滑的重启(直到接收到的请求处理完才重启)一个工作进程中,等待这个工作进程的最长秒数,这个配置会使在平滑地重启工作紫禁城中,如果工作进程# 超过了8秒就会被强制结束(忽略之前已经接收到的请求而直接结束)reload-mercy=10# 设置工作进程使用虚拟内存超过N MB就回收重启reload-on-as=1024# 监控python模块mtime来触发重载(只在开始时使用)python-autoreload=1 6.编写nginx镜像 Ngixn镜像使用Dockerfile如下所述： 12345678910FROM nginx:latest# 删除原有配置文件RUN mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/efault.conf.bak# 静态文件拷贝容器，并解压# ADD phone.tar.gz /opt/# ADD web.tar.gz /opt/# 添加新配置文件COPY ./nginx.conf /etc/nginx/conf.d/# 关闭守护模式CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;] nginx.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475server &#123; listen 80; server_name localhost; #access_log /var/log/nginx/host.access.log main; location / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&#x27;s document root # concurs with nginx&#x27;s one # #location ~ /\\.ht &#123; # deny all; #&#125;&#125;server &#123; listen 8000; server_name web; # 指定静态文件路径 location /static &#123; alias /src/static; &#125; # 指定项目路径uwsgi location / &#123; # proxy_pass http://web:3001; # 指定Docker-compose web服务的端口,反向代理 # uwsgi_pass web:3001; # uwsgi_read_timeout 600; # uwsgi_connect_timeout 600; # 设置连接uWSGI超时时间 # uwsgi_send_timeout 600; include uwsgi_params; # 导入nginx模块,它是用来和uWSGI进行通讯的 uwsgi_connect_timeout 30; uwsgi_pass web:3001; # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # proxy_set_header Host $http_host; # proxy_redirect off; # proxy_set_header X-Real-IP $remote_addr; &#125; &#125; 7.编写Mysql容器 从之前在官网拉取的镜像中获取其配置文件即可。 123456789101112131415161718192021222324252627282930313233# compose/mysql/conf/my.cnf# Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA## The MySQL Server configuration file.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html[mysqld]pid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockdatadir = /var/lib/mysqlsecure-file-priv= NULL# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0/etc/mysql/conf.d/下# Custom config should go here # 可将自定义的配置挂载到/etc/mysql/conf.d/下!includedir /etc/mysql/conf.d/ 8.编写redis配置1234567# compose/redis/redis.confdaemonize nobind 0.0.0.0appendonly noport 16379protected-mode norequirepass c6d3648d30745196bb4578c8e35ce10089e9351ab8d084f8c7d62b291058b11c 9.修改django项目的settings.py 在这里修改mysql，redis服务连接配置 12345678910111213141516171819202122232425262728293031323334# 生产环境设置 Debug = FalseDebug = FalseALLOWED_HOSTS = [&quot;*&quot;] #或是你的服务的IP# 设置数据库。这里用户名和密码必需和docker-compose.yml里mysql环境变量保持一致 DATABASES = &#123; &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, &#x27;HOST&#x27;: &#x27;mysqldb&#x27;, # 数据库主机 &#x27;PORT&#x27;: 3306, # 数据库端口 &#x27;USER&#x27;: &#x27;root&#x27;, # 数据库用户名 &#x27;PASSWORD&#x27;: &#x27;somemanageradmin&#x27;, # 数据库用户密码 &#x27;NAME&#x27;: &#x27;manageradmin&#x27; # 数据库名字 &#125;&#125;#DATABASES = &#123;# &#x27;default&#x27;: &#123;# &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,# &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,# &#125;#&#125;# 设置redis缓存CACHES = &#123; &#x27;default&#x27;: &#123; &#x27;BACKEND&#x27;: &#x27;django_redis.cache.RedisCache&#x27;, &#x27;LOCATION&#x27;: &#x27;redis://redis:16379/1&#x27;, &#x27;OPTIONS&#x27;: &#123; &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;, &quot;PASSWORD&quot;:&quot;c6d3648d30745196bb4578c8e35ce10089e9351ab8d084f8c7d62b291058b11c&quot; &#125; &#125;&#125; 10.使用docker-compose构建镜像并启动容器组1234567891011# 在docker-compose.yml所在文件夹下。输入指令sudo docker-compose build# 查看已生成的镜像sudo docker images# 启动容器组服务sudo docker-compose up# 查看运行中的容器sudo docker ps# 重新构建docker-compose up --build -d 可以看到运行容器 11.进入web容器执行启动脚本1$ sudo docker exec -it &lt;container id&gt; /bin/bash start.sh # 如果启动没用sheel脚本就不需此步骤 12.数据导入 这里我进入容器进行数据导入，当然也可以通过构建mysql的dockerfile去执行shell命令导入12345678#进入mysql 容器docker exec -it &lt;container id&gt; /bin/bash#登陆mysqlmysql -u root -p password# use到指定项目的库use manageradmin# 数据导入source /opt/west_coast.sql 最终访问ip就可以了! 13.参考文献： https://www.cnblogs.com/xujunkai/p/13040868.html https://www.cnblogs.com/xujunkai/category/1553692.html","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"欢迎使用 Cmd Markdown 编辑阅读器","slug":"Wellcome-Cmd-Markdown","date":"un33fin33","updated":"un33fin33","comments":true,"path":"2021/09/08/Wellcome-Cmd-Markdown/","link":"","permalink":"http://example.com/2021/09/08/Wellcome-Cmd-Markdown/","excerpt":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。","text":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == &#x27;__main__&#x27;: # A comment print &#x27;hello world&#x27; 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"}],"tags":[{"name":"Cmd Markdown","slug":"Cmd-Markdown","permalink":"http://example.com/tags/Cmd-Markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"un33fin33","updated":"un33fin33","comments":true,"path":"2021/09/08/hello-world/","link":"","permalink":"http://example.com/2021/09/08/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"Cmd Markdown","slug":"Cmd-Markdown","permalink":"http://example.com/tags/Cmd-Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}