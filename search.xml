<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FastApi-Documents</title>
    <url>/2021/09/26/FastApi-Documents/</url>
    <content><![CDATA[<hr>
<h2 id="1-FastApi的启动："><a href="#1-FastApi的启动：" class="headerlink" title="1.FastApi的启动："></a><strong>1.FastApi的启动：</strong></h2><blockquote>
<ul>
<li>方法1：</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ main:app --host=0.0.0.0 --port=5555 --reload --log-level=debug # 直接在命令行运行</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<blockquote>
<ul>
<li>方法2：</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;: # 使用__name__ == &#x27;__main__&#x27; 方法</span><br><span class="line">    uvicorn.run(app=&quot;main:app&quot;,host=&quot;0.0.0.0&quot;, port=5555,reload=True,debug=True)</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>方法3：<br><code># 在pycharm中进行配置</code><br><img src="http://qz3yihiyo.hd-bkt.clouddn.com/fastapi_cmd_result.png" alt="图片"></li>
<li>参考文档：</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.coder.work/article/7534868</span><br><span class="line">https://cloud.tencent.com/developer/article/1649051</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎使用 Cmd Markdown 编辑阅读器</title>
    <url>/2021/09/09/Wellcome-Cmd-Markdown/</url>
    <content><![CDATA[<hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<span id="more"></span>

<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-%E5%BE%85%E5%8A%9E%E4%BA%8B%E5%AE%9C-todo-%E5%88%97%E8%A1%A8">Todo 列表</a></h3><ul>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input checked="" disabled="" type="checkbox"> 新增 Todo 列表功能</li>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-%E6%B5%81%E7%A8%8B%E5%9B%BE">流程图</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-%E5%BA%8F%E5%88%97%E5%9B%BE">序列图</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-%E7%94%98%E7%89%B9%E5%9B%BE">甘特图</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>

<h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert">@ghosert</a><br>2016 年 07月 07日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cmd Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-常用命令</title>
    <url>/2021/09/09/docker-command/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>赚钱好比燕衔泥，花钱就象河决堤。</p>
</blockquote>
<span id="more"></span>

<h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a><strong>镜像相关命令</strong></h2><blockquote>
<p>1.查看本地的所有镜像：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.载入镜像到本地：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull &lt;image name&gt;:&lt;image tag&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.删除镜像：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker rmi -f &lt;image id&gt;</span><br><span class="line">$ docker rmi -f &lt;image name&gt;:&lt;image tag&gt;</span><br></pre></td></tr></table></figure>

<h2 id="容器使用相关命令"><a href="#容器使用相关命令" class="headerlink" title="容器使用相关命令"></a><strong>容器使用相关命令</strong></h2><blockquote>
<p>1.创建容器：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name &lt;container name&gt; &lt;image name&gt;|&lt;image id&gt; /bin/bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.进入容器：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker exec -it &lt;container id&gt;|&lt;container name&gt; /bin/bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.停止或重启容器：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker stop &lt;container id&gt;</span><br><span class="line">$ docker restart &lt;container id&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.删除容器：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker rm -f &lt;container id&gt;</span><br><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.查看容器：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">$ docker ps -a</span><br><span class="line">$ docker inspect &lt;container id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="容器连接相关命令"><a href="#容器连接相关命令" class="headerlink" title="容器连接相关命令"></a><strong>容器连接相关命令</strong></h2><blockquote>
<p>1.网络端口映射：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P training/webapp python app.py</span><br><span class="line">$ docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line">$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span><br><span class="line">$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.容器互联：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker network create -d bridge test-net</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name test1 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile相关操作"><a href="#Dockerfile相关操作" class="headerlink" title="Dockerfile相关操作"></a><strong>Dockerfile相关操作</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker build -t &lt;image name&gt;:&lt;tag&gt; &lt;path&gt;</span><br><span class="line">$ docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>
<h2 id="Docker-Compose相关操作"><a href="#Docker-Compose相关操作" class="headerlink" title="Docker Compose相关操作"></a><strong>Docker Compose相关操作</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose up --build -d</span><br><span class="line">$ docker-compose start &lt;container id&gt;</span><br><span class="line">$ docker-compose stop &lt;container id&gt;</span><br></pre></td></tr></table></figure>









]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>用docker-compose部署构建django+uwsgi+redis+mysql项目</title>
    <url>/2021/09/09/docker-compose-%E9%83%A8%E7%BD%B2-1/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-docker-compose组合容器"><a href="#1-docker-compose组合容器" class="headerlink" title="1.docker-compose组合容器"></a><strong>1.docker-compose组合容器</strong></h2><p>通过docker-compose编排并启动4个容器。</p>
<blockquote>
<ul>
<li>Django + Uwsgi容器：应用程序，后端。</li>
<li>Mysql容器：数据库服务。</li>
<li>Redis容器：缓存服务。</li>
<li>Nginx容器：反向代理，处理静态资源。</li>
</ul>
</blockquote>
<h2 id="2-Docker-compose部署Django项目布局树形图"><a href="#2-Docker-compose部署Django项目布局树形图" class="headerlink" title="2.Docker-compose部署Django项目布局树形图"></a><strong>2.Docker-compose部署Django项目布局树形图</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/build_project/</span><br><span class="line">├── compose # 存放各容器服务Dockerfile配置文件</span><br><span class="line">    ├── mysql</span><br><span class="line">    │   ├── conf</span><br><span class="line">    │   │   └── my.cnf # mysql配置文件</span><br><span class="line">    │   ├── init</span><br><span class="line">    │   │   └── init.sql # mysql初始化启动脚本</span><br><span class="line">    │   └── sqldata # sql 数据</span><br><span class="line">    │       └── west_coast.sql # .sql 文件</span><br><span class="line">    ├── nginx</span><br><span class="line">    │   ├── Dockerfile # 构建nginx镜像的dockerfile</span><br><span class="line">    │   ├── log # 挂载保存nginx容器内日志</span><br><span class="line">    │   │   ├── access.log # 正常日志</span><br><span class="line">    │   │   └── error.log  # 错误信息日志</span><br><span class="line">    │   ├── nginx.conf # nginx配置文件</span><br><span class="line">    │   ├── phone.tar.gz # vue静态打包文件手机端</span><br><span class="line">    │   └── web.tar.gz # vue静态打包文件pc端</span><br><span class="line">    ├── redis </span><br><span class="line">    │   ├── redis.conf # redis配置文件</span><br><span class="line">    │   └── redis.conf.bak</span><br><span class="line">    └── uwsgi</span><br><span class="line">        └── manager_admin-master.pid # 挂载保存django+uwsgi容器内uwsgi日志</span><br><span class="line">├── docker-compose.yml # 部署编排文件</span><br><span class="line">└── manager_admin # 项目目录</span><br><span class="line">    ├── db.sqlite3</span><br><span class="line">    ├── Dockerfile # 构建Django+Uwsgi镜像的dockerfile</span><br><span class="line">    ├── logs # 项目日志</span><br><span class="line">    ├── manage.py </span><br><span class="line">    ├── manager_admin # Django项目配置文件</span><br><span class="line">        ├── asgi.py</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        ├── __pycache__</span><br><span class="line">        ├── settings.py</span><br><span class="line">        ├── urls.py</span><br><span class="line">        └── wsgi.py</span><br><span class="line">    ├── pip.conf # pypi源配置。加速pip install</span><br><span class="line">    ├── README.md </span><br><span class="line">    ├── requirements.txt # django 项目依赖</span><br><span class="line">    ├── resignmanager</span><br><span class="line">    ├── run.sh # 启动Django+Uwsgi 脚本</span><br><span class="line">    ├── static # 静态文件</span><br><span class="line">    ├── templates </span><br><span class="line">    ├── upload </span><br><span class="line">    ├── uwsgi.ini # uwsgi配置</span><br><span class="line">    └── uwsgi.log </span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h2 id="3-基础镜像下载"><a href="#3-基础镜像下载" class="headerlink" title="3.基础镜像下载"></a><strong>3.基础镜像下载</strong></h2><blockquote>
<ul>
<li>nginx: docker pull nginx:latest</li>
<li>redis: docker pull redis:5.0.3</li>
<li>mysql: docker pull mysql:8.0.11</li>
<li>python3: docker pull python:3.9.6</li>
</ul>
</blockquote>
<h2 id="4-编写Dockerfile"><a href="#4-编写Dockerfile" class="headerlink" title="4.编写Dockerfile"></a><strong>4.编写Dockerfile</strong></h2><blockquote>
<p>通过docker-compose.yml，编排了4项容器服务，别名分别为redis，mysqldb，nginx和web：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.8&quot;</span><br><span class="line"></span><br><span class="line">volumes: # 自定义数据卷,位于宿主机/var/lib/docker/volumes内</span><br><span class="line">  myproject_db_vol: # 定义数据卷同步容器内mysql数据</span><br><span class="line">  myproject_redis_vol: # 定义数据卷同步redis容器内数据</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:5.0.3</span><br><span class="line">    volumes:</span><br><span class="line">      - myproject_redis_vol:/data # 给redis数据备份</span><br><span class="line">      - ./compose/redis/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件</span><br><span class="line">    expose: # 暴露容器给link到当前容器的容器，或者暴露给同一个networks的容器</span><br><span class="line">      - &quot;16379&quot;</span><br><span class="line">    command: redis-server /etc/redis/redis.conf</span><br><span class="line">   # restart: always # always表容器运行发生错误时一直重启    </span><br><span class="line"></span><br><span class="line">  mysqldb:</span><br><span class="line">    image: mysql:8.0.11</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=somemanageradmin # 数据库密码</span><br><span class="line">      - MYSQL_DATABASE=manageradmin # 数据库名称</span><br><span class="line">      - MYSQL_USER=manageradmin # 数据库用户名</span><br><span class="line">      - MYSQL_PASSWORD=manageradmin # 用户密码</span><br><span class="line">    volumes:</span><br><span class="line">      - myproject_db_vol:/var/lib/mysql:rw # 挂载数据库数据,可读可写</span><br><span class="line">      - ./compose/mysql/sqldata:/opt:rw # 挂载sql数据文件</span><br><span class="line">      - ./compose/mysql/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件</span><br><span class="line">      - ./compose/mysql/init:/docker-entrypoint-initdb.d/ # 挂载数据初始化sql脚本</span><br><span class="line">    ports: # 暴露容器端口到主机的任意端口或指定端口</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  web:</span><br><span class="line">    build: ./manager_admin # 使用manager_admin目录下的Dockerfile</span><br><span class="line">    ports: # 暴露端口到宿主机</span><br><span class="line">      - &quot;3001:3001&quot;</span><br><span class="line">    expose: # 不会将端口暴露给主机，主机无法访问expose的端口</span><br><span class="line">      - &quot;3001&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./manager_admin:/var/api/manager_admin # 挂载项目代码</span><br><span class="line">      - ./compose/uwsgi:/tmp # 挂载uwsgi日志</span><br><span class="line">    links: # 在未提供ports情况下，端口是变动的，使用links可以做保证每一次都能连接数据库</span><br><span class="line">      - mysqldb</span><br><span class="line">      - redis</span><br><span class="line">    depends_on: # 定义容器之间启动的优先级，但不会等到容器ready再启动</span><br><span class="line">      - mysqldb</span><br><span class="line">      - redis</span><br><span class="line">    environment:</span><br><span class="line">      - DEBUG=False</span><br><span class="line">    restart: always</span><br><span class="line">   # command: ./run.sh # 1.使用sheel脚本去启动</span><br><span class="line">   # command: /bin/bash -c &quot;python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; python3 manage.py runserver 0.0.0.0:3001 &quot; # 2.使用runserver启动</span><br><span class="line">    command: /bin/bash -c &quot;python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; uwsgi --ini /opt/manager_admin/uwsgi.ini &quot; # 3.使用uwsgi启动</span><br><span class="line">  nginx:</span><br><span class="line">    build: ./compose/nginx</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">      - &quot;8000:8000&quot;</span><br><span class="line">    expose:</span><br><span class="line">      - &quot;80&quot;</span><br><span class="line">      - &quot;8000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./compose/nginx/log:/var/log/nginx # 挂载日志</span><br><span class="line">      - /data/build_project/manager_admin/static:/src/static # 挂载静态文件</span><br><span class="line">    links:</span><br><span class="line">      - web</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">#volumes:</span><br><span class="line">#  db_data:</span><br><span class="line">#  web_data:</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-编写web镜像"><a href="#5-编写web镜像" class="headerlink" title="5.编写web镜像"></a><strong>5.编写web镜像</strong></h2><blockquote>
<p>构建manager_admin/Dockerfile</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># syntax=docker/dockerfile:1</span><br><span class="line">FROM python:3.9.6</span><br><span class="line"># 设置 python 环境变量</span><br><span class="line">ENV PYTHONUNBUFFERED 1</span><br><span class="line"># 容器内创建项目目录</span><br><span class="line">RUN mkdir -p /opt/manager_admin</span><br><span class="line"># 工作目录</span><br><span class="line">WORKDIR /opt/manager_admin</span><br><span class="line"># 将当前目录下文件 放入容器指定目录</span><br><span class="line">COPY . .</span><br><span class="line"># 修改pip镜像源</span><br><span class="line">COPY pip.conf /root/.pip/pip.conf</span><br><span class="line"># 更新pip</span><br><span class="line">RUN /usr/local/bin/python -m pip install --upgrade pip</span><br><span class="line"># 安装依赖</span><br><span class="line">RUN pip3 install -r requirements.txt</span><br><span class="line"># 启动项目脚本 增加执行权限</span><br><span class="line"># RUN chmod +x ./run.sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>run.sh</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 生成数据库可执行文件，</span><br><span class="line"># 根据数据库可执行文件来修改数据库</span><br><span class="line">#/bin/bash -c &quot;python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; nohup python3 manage.py runserver 0:3001 &gt;&gt; /usr/local/web_start.log 2&gt;&amp;1 &amp; </span><br><span class="line">python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate &amp;&amp; uwsgi -d --ini /opt/manager_admin/uwsgi.ini</span><br></pre></td></tr></table></figure>
<blockquote>
<p>uwsgi.ini配置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># 项目名称</span><br><span class="line">project=manager_admin</span><br><span class="line"></span><br><span class="line">base=/opt</span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 指定项目目录的绝对路径的第一层路径</span><br><span class="line"># 项目目录</span><br><span class="line">chdir=%(base)/%(project)</span><br><span class="line"></span><br><span class="line"># 指定项目application(项目的wsgi.py文件)</span><br><span class="line"># 写入相对路径即可,这个参数是以chdir参数做为相对路径</span><br><span class="line">module=%(project).wsgi:application</span><br><span class="line"># 启动主进程,来管理其他进程,其它的uwsgi进程都是这个master进程的子进程,如果kill这个master进程,相当于重启所有的uwsgi进程</span><br><span class="line">master=true</span><br><span class="line"># 进程个数(processess一样效果)</span><br><span class="line">processes=2</span><br><span class="line"># 指定socket文件,也可以指定为127.0.0.1:3001,这样就会监听网络套接字(nginx使用)</span><br><span class="line">socket=0.0.0.0:3001</span><br><span class="line"># 当服务器退出的时候自动删除unix socket文件和pid文件</span><br><span class="line">vacuum=true</span><br><span class="line"># 为每个工作进程设置请求数上限,当一个工作进程处理的请求数达到这个值,那么该工作进程就会被回收重用(重启),你可以用这个选项来默默地对抗内存泄露</span><br><span class="line">max-requests=5000</span><br><span class="line"># 指定启动时的pid文件路径</span><br><span class="line">pidfile=/tmp/%(project)-master.pid</span><br><span class="line"># 设置日志目录</span><br><span class="line">#daemonize=/tmp/%(project)-uwsgi.log    # 会出现uwsgi秒退状况</span><br><span class="line"># 设置一个请求的超时时间(秒),如果一个请求超过了这个时间,则请求被丢弃</span><br><span class="line">harakiri=60</span><br><span class="line"># 设置缓冲</span><br><span class="line">post buffering=8192</span><br><span class="line"># 设置用于uwsgi包解析的内部缓存区大小65535k,默认4k</span><br><span class="line">buffer-size=65535</span><br><span class="line"># 当一个请求被harakiri杀掉会输出一条日志</span><br><span class="line">harakiri-verbose=true</span><br><span class="line"># 开启内存使用情况报告</span><br><span class="line">memory-report=true</span><br><span class="line"># 设置在平滑的重启(直到接收到的请求处理完才重启)一个工作进程中,等待这个工作进程的最长秒数,这个配置会使在平滑地重启工作紫禁城中,如果工作进程</span><br><span class="line"># 超过了8秒就会被强制结束(忽略之前已经接收到的请求而直接结束)</span><br><span class="line">reload-mercy=10</span><br><span class="line"># 设置工作进程使用虚拟内存超过N MB就回收重启</span><br><span class="line">reload-on-as=1024</span><br><span class="line"># 监控python模块mtime来触发重载(只在开始时使用)</span><br><span class="line">python-autoreload=1</span><br></pre></td></tr></table></figure>

<h2 id="6-编写nginx镜像"><a href="#6-编写nginx镜像" class="headerlink" title="6.编写nginx镜像"></a><strong>6.编写nginx镜像</strong></h2><blockquote>
<p>Ngixn镜像使用Dockerfile如下所述：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM nginx:latest</span><br><span class="line"># 删除原有配置文件</span><br><span class="line">RUN mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/efault.conf.bak</span><br><span class="line"># 静态文件拷贝容器，并解压</span><br><span class="line"># ADD phone.tar.gz /opt/</span><br><span class="line"># ADD web.tar.gz /opt/</span><br><span class="line"># 添加新配置文件</span><br><span class="line">COPY ./nginx.conf /etc/nginx/conf.d/</span><br><span class="line"># 关闭守护模式</span><br><span class="line">CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;] </span><br></pre></td></tr></table></figure>

<blockquote>
<p>nginx.conf</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    server_name web;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 指定静态文件路径</span><br><span class="line">    location /static &#123;</span><br><span class="line">         alias /src/static;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 指定项目路径uwsgi</span><br><span class="line">    location / &#123;</span><br><span class="line">        # proxy_pass http://web:3001;</span><br><span class="line">        # 指定Docker-compose web服务的端口,反向代理</span><br><span class="line">       # uwsgi_pass web:3001;</span><br><span class="line">       # uwsgi_read_timeout 600;</span><br><span class="line">       # uwsgi_connect_timeout 600;  # 设置连接uWSGI超时时间</span><br><span class="line">       # uwsgi_send_timeout 600;</span><br><span class="line">        include    uwsgi_params;  # 导入nginx模块,它是用来和uWSGI进行通讯的</span><br><span class="line">        uwsgi_connect_timeout 30;</span><br><span class="line">        uwsgi_pass web:3001;</span><br><span class="line">       # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       # proxy_set_header Host $http_host;</span><br><span class="line">       # proxy_redirect off;</span><br><span class="line">       # proxy_set_header X-Real-IP  $remote_addr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-编写Mysql容器"><a href="#7-编写Mysql容器" class="headerlink" title="7.编写Mysql容器"></a>7.编写Mysql容器</h2><blockquote>
<p>从之前在官网拉取的镜像中获取其配置文件即可。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># compose/mysql/conf/my.cnf</span><br><span class="line"># Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">#</span><br><span class="line"># This program is free software; you can redistribute it and/or modify</span><br><span class="line"># it under the terms of the GNU General Public License as published by</span><br><span class="line"># the Free Software Foundation; version 2 of the License.</span><br><span class="line">#</span><br><span class="line"># This program is distributed in the hope that it will be useful,</span><br><span class="line"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line"># GNU General Public License for more details.</span><br><span class="line">#</span><br><span class="line"># You should have received a copy of the GNU General Public License</span><br><span class="line"># along with this program; if not, write to the Free Software</span><br><span class="line"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># The MySQL  Server configuration file.</span><br><span class="line">#</span><br><span class="line"># For explanations see</span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">secure-file-priv= NULL</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">/etc/mysql/conf.d/下</span><br><span class="line"># Custom config should go here # 可将自定义的配置挂载到/etc/mysql/conf.d/下</span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-编写redis配置"><a href="#8-编写redis配置" class="headerlink" title="8.编写redis配置"></a><strong>8.编写redis配置</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># compose/redis/redis.conf</span><br><span class="line">daemonize no</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">appendonly no</span><br><span class="line">port 16379</span><br><span class="line">protected-mode no</span><br><span class="line">requirepass c6d3648d30745196bb4578c8e35ce10089e9351ab8d084f8c7d62b291058b11c</span><br></pre></td></tr></table></figure>

<h2 id="9-修改django项目的settings-py"><a href="#9-修改django项目的settings-py" class="headerlink" title="9.修改django项目的settings.py"></a><strong>9.修改django项目的settings.py</strong></h2><blockquote>
<p>在这里修改mysql，redis服务连接配置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生产环境设置 Debug = False</span><br><span class="line">Debug = False</span><br><span class="line">ALLOWED_HOSTS = [&quot;*&quot;] #或是你的服务的IP</span><br><span class="line"></span><br><span class="line"># 设置数据库。这里用户名和密码必需和docker-compose.yml里mysql环境变量保持一致</span><br><span class="line"> DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;mysqldb&#x27;, # 数据库主机</span><br><span class="line">        &#x27;PORT&#x27;: 3306, # 数据库端口</span><br><span class="line">        &#x27;USER&#x27;: &#x27;root&#x27;, # 数据库用户名</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;somemanageradmin&#x27;, # 数据库用户密码</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;manageradmin&#x27; # 数据库名字</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#DATABASES = &#123;</span><br><span class="line">#    &#x27;default&#x27;: &#123;</span><br><span class="line">#        &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br><span class="line">#        &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># 设置redis缓存</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django_redis.cache.RedisCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;redis://redis:16379/1&#x27;,</span><br><span class="line">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="line">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class="line">            &quot;PASSWORD&quot;:&quot;c6d3648d30745196bb4578c8e35ce10089e9351ab8d084f8c7d62b291058b11c&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-使用docker-compose构建镜像并启动容器组"><a href="#10-使用docker-compose构建镜像并启动容器组" class="headerlink" title="10.使用docker-compose构建镜像并启动容器组"></a><strong>10.使用docker-compose构建镜像并启动容器组</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在docker-compose.yml所在文件夹下。输入指令</span><br><span class="line">sudo docker-compose build</span><br><span class="line"># 查看已生成的镜像</span><br><span class="line">sudo docker images</span><br><span class="line"># 启动容器组服务</span><br><span class="line">sudo docker-compose up</span><br><span class="line"># 查看运行中的容器</span><br><span class="line">sudo docker ps</span><br><span class="line"></span><br><span class="line"># 重新构建</span><br><span class="line">docker-compose up --build -d</span><br></pre></td></tr></table></figure>
<ul>
<li>可以看到运行容器<br><img src="http://qz3yihiyo.hd-bkt.clouddn.com/docker-ps.png" alt="图片"></li>
</ul>
<h2 id="11-进入web容器执行启动脚本"><a href="#11-进入web容器执行启动脚本" class="headerlink" title="11.进入web容器执行启动脚本"></a><strong>11.进入web容器执行启动脚本</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo docker exec -it &lt;container id&gt; /bin/bash start.sh # 如果启动没用sheel脚本就不需此步骤</span><br></pre></td></tr></table></figure>

<h2 id="12-数据导入"><a href="#12-数据导入" class="headerlink" title="12.数据导入"></a><strong>12.数据导入</strong></h2><ul>
<li>这里我进入容器进行数据导入，当然也可以通过构建mysql的dockerfile去执行shell命令导入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入mysql 容器</span><br><span class="line">docker exec -it &lt;container id&gt; /bin/bash</span><br><span class="line">#登陆mysql</span><br><span class="line">mysql -u root -p password</span><br><span class="line"># use到指定项目的库</span><br><span class="line">use manageradmin</span><br><span class="line"># 数据导入</span><br><span class="line">source /opt/west_coast.sql</span><br></pre></td></tr></table></figure></li>
<li>最终访问ip就可以了!<br><img src="http://qz3yihiyo.hd-bkt.clouddn.com/index-page.png" alt="图片"></li>
</ul>
<h2 id="13-参考文献："><a href="#13-参考文献：" class="headerlink" title="13.参考文献："></a><strong>13.参考文献：</strong></h2><blockquote>
<ul>
<li><a href="https://www.cnblogs.com/xujunkai/p/13040868.html">https://www.cnblogs.com/xujunkai/p/13040868.html</a></li>
<li><a href="https://www.cnblogs.com/xujunkai/category/1553692.html">https://www.cnblogs.com/xujunkai/category/1553692.html</a></li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/09/hello-world/</url>
    <content><![CDATA[<hr>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
